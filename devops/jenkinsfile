#!groovy

//@Library('functions')_


pipeline {
	agent any // Default Agent

  environment {
		DOCKERHUB_CREDENTIALS=credentials('dockerhub')
    // TAG_NAME=getLastGitTag()
	}


  stages {

    stage('Test') {
      // Specifies where the entire Pipeline, or a specific stage, will execute in the Jenkins environment depending on where the agent section is placed
    	agent {
      	docker {
        	image 'maven:3.8.6-openjdk-11-slim'
        }
      }
      steps {
      	sh 'mvn test'
      }
    }

    stage('SonarQube') {
      // Specifies where the entire Pipeline, or a specific stage, will execute in the Jenkins environment depending on where the agent section is placed
    	agent {
      	docker {
        	image 'maven:3.8.6-openjdk-11-slim'
        }
      }
      steps {
        //sh 'echo "SONAR HOME: ${env.SONARQUBE_HOST}"'
        sh 'mvn verify sonar:sonar -Dsonar.projectKey=java-example-jenkins -Dsonar.host.url="${env.SONARQUBE_HOST_LOCAL}" -Dsonar.login=sqa_c51f8c11cf1a1c755ee60d84a015a83956e2aa60'
      }
    }

    stage('Maven Install') {
      // Specifies where the entire Pipeline, or a specific stage, will execute in the Jenkins environment depending on where the agent section is placed
    	agent {
      	docker {
        	image 'maven:3.8.6-openjdk-11-slim'
        }
      }
      steps {
      	sh 'mvn clean install'
      }
    }


    stage('Docker Build') {
      steps {
        sh 'du -sh $WORKSPACE/target/*.jar'
      	sh 'docker build -t scalian_training/java-app -f devops/Dockerfile  --build-arg VERSION=1.0.2-SNAPSHOT .'
      }
    }



    /*stage('Testing') {
      steps {
        // Block of scripted pipeline
        script {
          sh 'docker run -d --rm -p 40084:8080  --name java-app   scalian_training/java-app'
          def status = sh(script: "curl -sLI -w '%{http_code}' localhost:40084/hello -o /dev/null", returnStdout: true)
          if (status != 200 && status != 201) {
              error("Testing ERROR. Returned status code = $status when calling $url")
          }
        }
      }
    }*/


    stage('Docker Push') {
      steps {
        sh 'echo $DOCKERHUB_CREDENTIALS_PSW | docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin'
      	sh 'docker tag scalian_training/java-app davidlc91/scalian_training_java-app:prueba-jenkins'
        sh 'docker push davidlc91/scalian_training_java-app:prueba-jenkins'
      }
    }

    /*stage('Deploy') {
    	when {
        tag 'release-*'
      }
      steps {
      	echo "Deploying $TAG_NAME"
      }
    }*/
  }

  post {
    always  {
        sh 'docker logout'
        

    }
    success {
      // send mail
      echo "SUCCESS"
      archiveArtifacts artifacts: 'target/*.jar'
    }
  }
  
}


def getLastGitTag() {
    sh "git tag --sort version:refname | tail -1 > version.tmp"
    String tag = readFile 'version.tmp'
    echo "Tag, ${tag}." 
    return tag
}